# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      # mlpack and anaconda docker image
      # previously circleci/python:3.6.1
      #- image: davidinouye/destructive-deep-learning
        - image: davidinouye/research
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
#      - restore_cache:
#          keys:
#          - v1-dependencies-{{ checksum "setup.py" }}
#          # fallback to using the latest cache if no exact match is found
#          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            # Needed to install POT correctly below
            pip install setuptools
            pip install Cython
            pip install numpy
            pip install pypandoc
            pip install -e .[test]

#      - save_cache:
#          paths:
#            - ./venv
#          key: v1-dependencies-{{ checksum "setup.py" }}
        
      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            # calls setup.py and downloads necessary packages if needed
            # Should be roughly equivalent to the following command
            # python setup.py install
            make test

#      - store_artifacts:
#          path: test-reports
#          destination: test-reports
