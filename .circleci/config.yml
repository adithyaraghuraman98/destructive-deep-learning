# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      # mlpack and anaconda docker image
      # previously circleci/python:3.6.1
      - image: davidinouye/destructive-deep-learning
      #  - image: davidinouye/research
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          name: Restore pip dependencies cache
          keys:
          - v0-1-0-dependencies-{{ checksum "setup.py" }}
          # fallback to using the latest cache if no exact match is found
          - v0-1-0-dependencies-

      - run:
          name: Install pip dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            # Needed to install POT correctly below
            pip install setuptools
            pip install Cython
            pip install numpy
            # Currently required by ddl package including for testing
            pip install pypandoc
            pip install pytest
            pip install pytest-cov
            pip install codecov
            pip install nose
            pip install pot
            pip install pandas
            pip install scikit-learn
            pip install isort
            pip install flake8

      - save_cache:
          name: Save pip dependencies cache
          paths:
            - ./venv
          key: v0-1-0-dependencies-{{ checksum "setup.py" }}

      - restore_cache:
          name: Restore MNIST data cache
          keys:
          - data-mnist-{{ checksum "scripts/maf_data.py" }}
          # fallback to using the latest cache if no exact match is found
          - data-mnist-

      - run:
          name: Load MNIST data
          command: |
            . venv/bin/activate
            # calls setup.py and downloads necessary packages if needed
            # Should be roughly equivalent to the following command
            # python setup.py install
            make data/mnist

      - save_cache:
          name: Save MNIST data cache
          paths:
            - ./data
          key: data-mnist-{{ checksum "scripts/maf_data.py" }}

      - restore_cache:
          name: Restore mlpack build directory
          keys:
          - mlpack-2-{{ checksum "ddl/externals/mlpack/setup.py" }}-{{ checksum "ddl/externals/mlpack/_det.pyx" }}

      - run:
          name: Build ddl package
          command: |
            . venv/bin/activate
            # calls setup.py and downloads necessary packages if needed
            # Should be roughly equivalent to the following command
            # python setup.py install
            #pip install --verbose .[test]
            make # Build mlpack extensions in-place

      - save_cache:
          name: Save mlpack build directory
          paths:
            - ./ddl/externals/mlpack/mlpack-mlpack-3.0.2
          key: mlpack-2-{{ checksum "ddl/externals/mlpack/setup.py" }}-{{ checksum "ddl/externals/mlpack/_det.pyx" }}
        
      - run:
          name: Run package tests, toy experiment and code coverage
          command: |
            . venv/bin/activate
            make test

      - run:
          name: Run ICML MNIST experiment test
          command: |
            . venv/bin/activate
            make test/experiments/mnist

#      - store_artifacts:
#          path: test-reports
#          destination: test-reports
